<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="7.1.2.201412051435" AlpVersion="7.1.10">
<Model>
	<Id>1202856376109</Id>
	<Name><![CDATA[LGCA_c17]]></Name>
	<Description><![CDATA[An implementation of a LGCA model as requested in the Modelling and Simulation Assignment C17.]]></Description>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[lgcac17]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Day]]></ModelTimeUnit>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1422734692361</Id>
			<Name><![CDATA[HexGrid]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<PresentationTopGroupPersistent>true</PresentationTopGroupPersistent>
			<IconTopGroupPersistent>true</IconTopGroupPersistent>
			<StartupCode><![CDATA[this.gridHelper = new Tools.GridHelper(this.numRows, this.numColumns);
System.out.println("HexGrid onStartup start");
this.initHCells();
System.out.println("HexGrid onStartup initHCells done");
createHexGrid();
System.out.println("HexGrid onStartup createHexGrid done");
initParticles();
System.out.println("HexGrid onStartup initParticles done");
populateHCells();
System.out.println("HexGrid onStartup populateHCells done");
//populateHCellsCustom();
System.out.println("HexGrid onStartup end");]]></StartupCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1423154455816</Id>
				<Name><![CDATA[1423154455816]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameters:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10 / getScale().pixelsPerUnit(METER) / 86400]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<AfterStepCode><![CDATA[//System.out.println("Step");]]></AfterStepCode>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>true</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[DAY]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>false</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1423209600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[DAY]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[DAY]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1423154455856</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<ConnectionsId>1422734692360</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1422793109736</Id>
					<Name><![CDATA[numSusceptible]]></Name>
					<X>20</X><Y>460</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[0]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422793127919</Id>
					<Name><![CDATA[numInfected]]></Name>
					<X>20</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[0]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422793144372</Id>
					<Name><![CDATA[numRecovered]]></Name>
					<X>20</X><Y>500</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[0]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1423175352945</Id>
					<Name><![CDATA[gridHelper]]></Name>
					<X>30</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Tools.GridHelper]]></Type>        
						<InitialValue><![CDATA[null]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1423182194202</Id>
					<Name><![CDATA[popIndex]]></Name>
					<X>90</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int[]]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1422734934983</Id>
					<Name><![CDATA[numRows]]></Name>
					<X>370</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422734934981</Id>
							<EditorContolType>SLIDER</EditorContolType>
							<MinSliderValue><![CDATA[1]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422734907110</Id>
					<Name><![CDATA[numColumns]]></Name>
					<X>360</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422734907108</Id>
							<EditorContolType>SLIDER</EditorContolType>
							<MinSliderValue><![CDATA[1]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422749587994</Id>
					<Name><![CDATA[numParticles]]></Name>
					<X>380</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422749587992</Id>
							<EditorContolType>SLIDER</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[500]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422786080215</Id>
					<Name><![CDATA[infectionProbability]]></Name>
					<X>360</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[float]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422786080213</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422786136304</Id>
					<Name><![CDATA[recoveryProbabilibty]]></Name>
					<X>360</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[float]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422786136302</Id>
							<Label><![CDATA[recoveryProbability]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422788704773</Id>
					<Name><![CDATA[initialSusceptible]]></Name>
					<X>360</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422788704771</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422788724095</Id>
					<Name><![CDATA[initialRecovered]]></Name>
					<X>360</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422788724093</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422788743148</Id>
					<Name><![CDATA[initialInfected]]></Name>
					<X>360</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422788743146</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422892763000</Id>
					<Name><![CDATA[randomizeParticleLocationsBeforeEachStep]]></Name>
					<X>370</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422892762998</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1422894042261</Id>
					<Name><![CDATA[debugOutput]]></Name>
					<X>470</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1422894042259</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1423065907511</Id>
					<Name><![CDATA[displayParticles]]></Name>
					<X>510</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<NumericType><![CDATA[double]]></NumericType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1423065907509</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1423011870046</Id>
					<Name><![CDATA[particles]]></Name>
					<X>410</X><Y>-60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[java.util.ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[Particle]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1423056190555</Id>
					<Name><![CDATA[hCells]]></Name>
					<X>260</X><Y>-20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[java.util.ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[HCell]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1423062100211</Id>
					<Name><![CDATA[pixels]]></Name>
					<X>-90</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[java.util.ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[ShapePixel]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
			</Variables>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1422734793074</Id>
					<Name><![CDATA[createHexGrid]]></Name>
					<X>20</X><Y>-10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[
if (numRows<=0) throw new RuntimeException("numRows has to be larger than 0, but was "+numRows);
if (numColumns<=0) throw new RuntimeException("numColumns has to be larger than 0, but was "+numColumns);
if (this.hCells.size() != (int)(this.numRows*this.numColumns)) throw new RuntimeException("hCells should have "+(numRows*numColumns)+" elements but only has "+this.hCells.size());

this.popIndex = new int[this.hCells.size()*6];

// Set positions:
if (numColumns > 1) {
	this.rectangle.setHeight(numRows*HCell.height-(numRows*HCell.verticalOffset)+HCell.verticalOffset);
} else {
	this.rectangle.setHeight(numRows*HCell.height);
}

if (numRows > 1) {
	this.rectangle.setWidth(numColumns*HCell.width+HCell.horizontalOffset);
} else {
	this.rectangle.setWidth(numColumns*HCell.width);
}

boolean topIsLeft = true;
int cellCounter=-1; 
for (int r=0; r<numRows; r++) {
	topIsLeft=!topIsLeft;
	for (int c=0; c<numColumns; c++) {
		cellCounter++;
		HCell current = this.hCells.get(cellCounter);
		double offsetX = 0;
		if (topIsLeft) offsetX = HCell.horizontalOffset;
		double offsetY = -HCell.verticalOffset*r;
		current.setXY(this.rectangle.getX()+(c*HCell.width)+offsetX,
								this.rectangle.getY()+(r*HCell.height)+offsetY);
		
	}
}

this.datagraph.setX(this.rectangle.getX()+340);
this.datagraph.setY(this.rectangle.getY()+this.rectangle.getHeight()+120);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1422737689383</Id>
					<Name><![CDATA[populateHCells]]></Name>
					<X>10</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[this.clearAllParticles();
//int[][] index = new int[this.hCells.size()*6][2];
System.out.println("populateHCells clearAllParticles done");
int cellCounter=-1;
final int mult =100000000;
for (int i=0; i<(this.hCells.size()); i++) {
	for (int d=0; d<6; d++) {
		cellCounter++;
		if (i>=100000000) throw new RuntimeException("too large");
		this.popIndex[cellCounter]=(d*mult)+i;
	}
	
}
System.out.println("populateHCells index filled");
//index = Tools.shuffleArrayList(index);
//Collections.shuffle(index);
this.shufflePopIndex();
System.out.println("populateHCells index shuffled");

int cellNum = -2;
int dirNum = -2;
// will contain Particle initialization
for (int i=0; i<particles.size(); i++) {
	if (i%1000==0) System.out.println(i);
	for (int j=0; j<=6; j++) {
	if (j==6) throw new RuntimeException("wrong decomposition "+this.popIndex[i]+" "+i);
		 
		 if (this.popIndex[i] < mult) {
		 	cellNum=this.popIndex[i];
		 	dirNum=j;
		 	break;
		 }
		 this.popIndex[i]-=mult;
	}
	//System.out.println("hCellSize:"+this.hCells.size()+" particlesSize:"+this.particles.size()+" pop: cellNum:"+cellNum+" dirNum:"+dirNum);
	hCells.get(cellNum).setParticle(Tools.Direction.fromInt(dirNum), i);
}
System.out.println("populateHCells afterParticleSet");]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1422783003132</Id>
					<Name><![CDATA[populateHCellsCustom]]></Name>
					<X>20</X><Y>-80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//this.map.get(3).get(0).setParticle(Tools.Direction.E, 0);
//this.map.get(3).get(8).setParticle(Tools.Direction.W, 1);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1422788977250</Id>
					<Name><![CDATA[initParticles]]></Name>
					<X>120</X><Y>-10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[ArrayList<Tools.Status> index = new ArrayList<Tools.Status>();
if (this.initialInfected+this.initialRecovered+this.initialSusceptible != this.numParticles) {
	throw new RuntimeException("Initial values do not match the number of particles: "+numParticles+","+this.initialInfected+","+this.initialRecovered+this.initialSusceptible);
}
for (int i=0; i<this.initialInfected; i++) {
	index.add(Tools.Status.INFECTED);
}
for (int i=0; i<this.initialSusceptible; i++) {
	index.add(Tools.Status.SUSCEPTIBLE);
}
for (int i=0; i<this.initialRecovered; i++) {
	index.add(Tools.Status.RECOVERED);
}

Collections.shuffle(index);

for (int i=0; i<index.size(); i++) {
	Tools.Status s = index.get(i);
	switch(s) {
	case INFECTED:
	this.numInfected++;
	break;
	case RECOVERED:
	this.numRecovered++;
	break;
	case SUSCEPTIBLE:
	this.numSusceptible++;
	break;
	}
	Particle p = new Particle(i, this);
	p.setInitialState(s);
	this.particles.add(p);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1422892526120</Id>
					<Name><![CDATA[clearAllParticles]]></Name>
					<X>130</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[for (HCell c : this.hCells) {
	c.clearParticles();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1423056223320</Id>
					<Name><![CDATA[initHCells]]></Name>
					<X>120</X><Y>-80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[this.hCells = new ArrayList<HCell>();

int num = this.numColumns*this.numRows;

for (int i=0; i<num; i++) {
	HCell c = new HCell(i);
	this.hCells.add(c);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1423182968678</Id>
					<Name><![CDATA[shufflePopIndex]]></Name>
					<X>180</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int a;
int index;
for (int i = this.popIndex.length - 1; i > 0; i--){
	index = Tools.random.nextInt(i + 1);
	a = this.popIndex[index];
	this.popIndex[index] = this.popIndex[i];
	this.popIndex[i] = a;
}
]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1422734692360</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<EmbeddedObjects>
				<EmbeddedObject>
					<Id>0</Id>
					<Name><![CDATA[clock]]></Name>
					<Description><![CDATA[Just a helper Agent because HexGrid does not perform step/beforeStep methods]]></Description>
					<X>180</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[lgcac17]]></PackageName>
						<ClassName><![CDATA[Clock]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[lgcac17]]></PackageName>
							<ClassName><![CDATA[Clock]]></ClassName>
							<ItemName><![CDATA[1423154455857]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
					</Parameters>
					<ReplicationFlag>false</ReplicationFlag>
					
					<Replication><![CDATA[100]]></Replication>
					
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode><![CDATA[0]]></XCode>
					<YCode><![CDATA[0]]></YCode>
					<ZCode><![CDATA[0]]></ZCode>
					<ColumnCode><![CDATA[0]]></ColumnCode>
					<RowCode><![CDATA[0]]></RowCode>
					<LatitudeCode><![CDATA[0]]></LatitudeCode>
					<LongitudeCode><![CDATA[0]]></LongitudeCode>
				</EmbeddedObject>
			</EmbeddedObjects>

			<Shapes>
				<Rectangle>
					<Id>1422737881198</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>330</Width>
					<Height>230</Height>
					<Rotation>0.0</Rotation>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Group>
					<Id>1422800169882</Id>
					<Name><![CDATA[datagraph]]></Name>
					<X>340</X><Y>340</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>

			<Shapes>
				<Rectangle>
					<Id>1422799769915</Id>
					<Name><![CDATA[rectangle1]]></Name>
					<X>-340</X><Y>-110</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>660</Width>
					<Height>210</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Group>
					<Id>1422799946743</Id>
					<Name><![CDATA[group]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>


				</Group>
				<Text>
					<Id>1422800010262</Id>
					<Name><![CDATA[text]]></Name>
					<X>180</X><Y>-20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[numSusceptible]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422800025694</Id>
					<Name><![CDATA[text1]]></Name>
					<X>180</X><Y>0</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[numInfected]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422800037406</Id>
					<Name><![CDATA[text2]]></Name>
					<X>180</X><Y>20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[numRecovered]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422800070210</Id>
					<Name><![CDATA[text3]]></Name>
					<X>270</X><Y>-20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[]]></Text>
					<TextCode><![CDATA[this.numSusceptible]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422800099183</Id>
					<Name><![CDATA[text4]]></Name>
					<X>270</X><Y>0</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[]]></Text>
					<TextCode><![CDATA[this.numInfected]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422800108814</Id>
					<Name><![CDATA[text5]]></Name>
					<X>270</X><Y>20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[]]></Text>
					<TextCode><![CDATA[this.numRecovered]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Shapes>
			<Charts>
    			<TimePlot>
					<Id>1422792958117</Id>
					<Name><![CDATA[plot]]></Name>
					<X>-330</X><Y>-110</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1423209600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[DAY]]></Unit>
					</RecurrenceCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>520</Width>
					<Height>210</Height>
					<BackgroundColor/>
					<BorderColor/>
					<ChartArea>
						<XOffset>50</XOffset>
						<YOffset>30</YOffset>
						<Width>440</Width>
						<Height>120</Height>
						<BackgroundColor>-1</BackgroundColor>
						<BorderColor>-16777216</BorderColor>
						<GridColor>-12566464</GridColor>
					</ChartArea>
					<Legend>
						<Place>SOUTH</Place>
						<TextColor>-16777216</TextColor>
						<Size>30</Size>
					</Legend>
					<Labels>
						<HorLabelsPosition>DEFAULT</HorLabelsPosition>
						<VerLabelsPosition>DEFAULT</VerLabelsPosition>
						<TextColor>-12566464</TextColor>
					</Labels>
					<Persistent>true</Persistent>
					<ShowLegend>true</ShowLegend>
					<TimeWindowsMovementType>MOVEMENT_WITH_DATA</TimeWindowsMovementType>		
					<TimeWindowUnits>MODEL_TIME_UNIT</TimeWindowUnits>
					<VerScaleFromExpression><![CDATA[0]]></VerScaleFromExpression>
					<VerScaleToExpression><![CDATA[1]]></VerScaleToExpression>
					<VerScaleType>AUTO</VerScaleType>
					<DrawLine>true</DrawLine>
					<Interpolation>LINEAR</Interpolation>
					<DatasetExpression>  
						<Title><![CDATA[numSusceptible]]></Title>
					<Expression><![CDATA[my_dataset]]></Expression>
					<Color>-16711936</Color>
					<Expression2><![CDATA[numSusceptible]]></Expression2>
					<Expression2Flag>true</Expression2Flag>
						<PointStyle>NONE</PointStyle>
						<LineWidth>2.0</LineWidth>
					</DatasetExpression>
					<DatasetExpression>  
						<Title><![CDATA[numInfected]]></Title>
					<Expression><![CDATA[my_dataset1]]></Expression>
					<Color>-65536</Color>
					<Expression2><![CDATA[numInfected]]></Expression2>
					<Expression2Flag>true</Expression2Flag>
						<PointStyle>NONE</PointStyle>
						<LineWidth>2.0</LineWidth>
					</DatasetExpression>
					<DatasetExpression>  
						<Title><![CDATA[numRecovered]]></Title>
					<Expression><![CDATA[my_dataset2]]></Expression>
					<Color>-1644806</Color>
					<Expression2><![CDATA[numRecovered]]></Expression2>
					<Expression2Flag>true</Expression2Flag>
						<PointStyle>NONE</PointStyle>
						<LineWidth>2.0</LineWidth>
					</DatasetExpression>
					<SamplesToKeep>1000</SamplesToKeep>
					<TimeWindowExpression><![CDATA[100]]></TimeWindowExpression>
					<CustomLabelFormat><![CDATA[dd.MM.yyyy HH:mm:ss]]></CustomLabelFormat>
					<LabelFormat>MODEL_TIME_UNITS</LabelFormat>
    			</TimePlot>
			</Charts>

				</Group>
			</Shapes>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1422893095820</Id>
			<Name><![CDATA[Clock]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<PresentationTopGroupPersistent>true</PresentationTopGroupPersistent>
			<IconTopGroupPersistent>true</IconTopGroupPersistent>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1423154455857</Id>
				<Name><![CDATA[1423154455857]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameters:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10 / getScale().pixelsPerUnit(METER) / 86400]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<AfterStepCode><![CDATA[if (this.hexGrid.debugOutput)System.out.println("Clock onStep start");
for (HCell c : this.hexGrid.hCells) {
	c.onStep(this.hexGrid);
}
if (this.hexGrid.debugOutput)System.out.println("Clock onStep end");
if (this.hexGrid.displayParticles) {
for (Particle p : this.hexGrid.particles) {
	p.updateRepresentation(this.hexGrid);
}
}
]]></AfterStepCode>
				<BeforeStepCode><![CDATA[if (this.hexGrid.debugOutput)System.out.println("Clock onBeforeStep start");
for (HCell c : this.hexGrid.hCells) {
	c.onBeforeStep(this.hexGrid);
}
if (this.hexGrid.randomizeParticleLocationsBeforeEachStep) {
	//System.out.println("random");
	this.hexGrid.populateHCells();
} else {
	//(System.out.println("no random");
}
if (this.hexGrid.debugOutput)System.out.println("Clock onBeforeStep end");]]></BeforeStepCode>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[DAY]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1423209600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[DAY]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[DAY]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1423154455858</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<ConnectionsId>1422893095819</ConnectionsId>
			<AgentLinks>
				<AgentLink>
					<Id>1422893095819</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1422893095869</Id>
					<Name><![CDATA[hexGrid]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[lgcac17]]></PackageName>
						<ClassName><![CDATA[HexGrid]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>


		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>	
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1422734692361">
			<Id>1422738545607</Id>
			<Name><![CDATA[LGCA_C17]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<PresentationTopGroupPersistent>true</PresentationTopGroupPersistent>
			<IconTopGroupPersistent>true</IconTopGroupPersistent>
			<Frame>
				<X>0</X>
				<Y>0</Y>
				<Width>1000</Width>
				<Height>600</Height>
				<Maximized>false</Maximized>
				<CloseConfirmation>false</CloseConfirmation>
			</Frame>
			<CommandLineArguments><![CDATA[-XX:MaxPermSize=512m -Xmx1024M]]></CommandLineArguments>
			<MaximumMemory>256</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[-XX:MaxPermSize=512m -Xmx1024M]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>
			<SnapshotFile></SnapshotFile>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1422750132901</Id>
					<Name><![CDATA[numRows]]></Name>
					<X>180</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[10]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422750143252</Id>
					<Name><![CDATA[numColumns]]></Name>
					<X>290</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[10]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422750156425</Id>
					<Name><![CDATA[numParticles]]></Name>
					<X>180</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[20]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422787814561</Id>
					<Name><![CDATA[infectionProbability]]></Name>
					<X>390</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[90]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422787836134</Id>
					<Name><![CDATA[recoveryProbability]]></Name>
					<X>390</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[3]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422788346885</Id>
					<Name><![CDATA[initialInfected]]></Name>
					<X>390</X><Y>310</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[0]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422788431506</Id>
					<Name><![CDATA[initialSusceptible]]></Name>
					<X>390</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[this.numParticles]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422788455490</Id>
					<Name><![CDATA[initialRecovered]]></Name>
					<X>390</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue><![CDATA[0]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422893288108</Id>
					<Name><![CDATA[randomizeParticleLocationsBeforeEachStep]]></Name>
					<X>310</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue><![CDATA[false]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422894472066</Id>
					<Name><![CDATA[debugOutput]]></Name>
					<X>450</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422896216022</Id>
					<Name><![CDATA[C]]></Name>
					<X>290</X><Y>440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422896221563</Id>
					<Name><![CDATA[N]]></Name>
					<X>290</X><Y>540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue><![CDATA[100000]]></InitialValue>                 	
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1422896226353</Id>
					<Name><![CDATA[n]]></Name>
					<X>290</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
			</Variables>

			<Shapes>
				<Text>
					<Id>1422738545608</Id>
					<Name><![CDATA[text]]></Name>
					<X>40</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[LGCA_c17]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422750224754</Id>
					<Name><![CDATA[text1]]></Name>
					<X>170</X><Y>40</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[numRows]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422750249196</Id>
					<Name><![CDATA[text2]]></Name>
					<X>280</X><Y>40</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[numColumns]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422750252187</Id>
					<Name><![CDATA[text3]]></Name>
					<X>170</X><Y>130</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[numParticles]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422788008145</Id>
					<Name><![CDATA[text4]]></Name>
					<X>160</X><Y>200</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[recoveryProbability (%)]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1422788012166</Id>
					<Name><![CDATA[text5]]></Name>
					<X>160</X><Y>240</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[infectionProbability (%)]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Shapes>
			<Controls>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422738545609</Id>
					<Name><![CDATA[button]]></Name>
					<X>40</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="100" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
						<ActionCode><![CDATA[if ( getState() == IDLE )
	run();
getPresentation().setPresentable( getEngine().getRoot() );]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Run]]></LabelText>
						<LabelCode><![CDATA[getState() == IDLE ?
	"Run" :
	"Top level agent"]]></LabelCode>
					</ExtendedProperties>
				</Control>
				<Control Type="EditBox">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422750188688</Id>
					<Name><![CDATA[editbox]]></Name>
					<X>170</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="100" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<MinValue><![CDATA[1]]></MinValue>
						<LinkTo>true</LinkTo>
						<Link>numRows</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="EditBox">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422750192558</Id>
					<Name><![CDATA[editbox1]]></Name>
					<X>280</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="100" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<MinValue><![CDATA[1]]></MinValue>
						<LinkTo>true</LinkTo>
						<Link>numColumns</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="EditBox">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422750195099</Id>
					<Name><![CDATA[editbox2]]></Name>
					<X>170</X><Y>150</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="100" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<MinValue><![CDATA[0]]></MinValue>
						<LinkTo>true</LinkTo>
						<Link>numParticles</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="Slider">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422787983951</Id>
					<Name><![CDATA[slider]]></Name>
					<X>160</X><Y>260</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="220" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<DefaultValueCode><![CDATA[0]]></DefaultValueCode>
						<Orientation>HORIZONTAL</Orientation>
						<MinValue><![CDATA[0]]></MinValue>
						<MaxValue><![CDATA[100]]></MaxValue>
						<LinkTo>true</LinkTo>
						<Link>infectionProbability</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="Slider">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422787996022</Id>
					<Name><![CDATA[slider1]]></Name>
					<X>160</X><Y>210</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="220" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<DefaultValueCode><![CDATA[0]]></DefaultValueCode>
						<Orientation>HORIZONTAL</Orientation>
						<MinValue><![CDATA[0]]></MinValue>
						<MaxValue><![CDATA[100]]></MaxValue>
						<LinkTo>true</LinkTo>
						<Link>recoveryProbability</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="Slider">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422788413743</Id>
					<Name><![CDATA[slider2]]></Name>
					<X>160</X><Y>300</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="220" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<DefaultValueCode><![CDATA[0]]></DefaultValueCode>
						<Orientation>HORIZONTAL</Orientation>
						<MinValue><![CDATA[0]]></MinValue>
						<MaxValue><![CDATA[this.numParticles-this.initialSusceptible-this.initialRecovered]]></MaxValue>
						<LinkTo>true</LinkTo>
						<Link>initialInfected</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="Slider">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422788496175</Id>
					<Name><![CDATA[slider3]]></Name>
					<X>160</X><Y>350</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="220" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<DefaultValueCode><![CDATA[0]]></DefaultValueCode>
						<Orientation>HORIZONTAL</Orientation>
						<MinValue><![CDATA[0]]></MinValue>
						<MaxValue><![CDATA[this.numParticles-this.initialInfected-this.initialRecovered]]></MaxValue>
						<LinkTo>true</LinkTo>
						<Link>initialSusceptible</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="Slider">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422788522388</Id>
					<Name><![CDATA[slider4]]></Name>
					<X>160</X><Y>400</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="220" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<DefaultValueCode><![CDATA[0]]></DefaultValueCode>
						<Orientation>HORIZONTAL</Orientation>
						<MinValue><![CDATA[0]]></MinValue>
						<MaxValue><![CDATA[this.numParticles-this.initialInfected-this.initialSusceptible]]></MaxValue>
						<LinkTo>true</LinkTo>
						<Link>initialRecovered</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="CheckBox">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422893314600</Id>
					<Name><![CDATA[checkbox]]></Name>
					<X>290</X><Y>150</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="250" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[randomizeParticleLocationsBeforeEachStep]]></LabelText>
						<LinkTo>true</LinkTo>
						<Link>randomizeParticleLocationsBeforeEachStep</Link>
	 				</ExtendedProperties>
				</Control>
				<Control Type="CheckBox">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422894507628</Id>
					<Name><![CDATA[checkbox1]]></Name>
					<X>290</X><Y>130</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="240" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Show infections/recoveries in System.out]]></LabelText>
						<LinkTo>true</LinkTo>
						<Link>debugOutput</Link>
	 				</ExtendedProperties>
				</Control>
				<Control Type="EditBox">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422896241443</Id>
					<Name><![CDATA[editbox3]]></Name>
					<X>180</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="100" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
						<EnableExpression><![CDATA[true]]></EnableExpression>
						<ActionCode><![CDATA[this.n = Math.floor(Math.sqrt((5*(this.N - 1)+this.C)/6*this.C));
this.numRows=(int)this.n;
this.numColumns=(int)this.n;]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LinkTo>true</LinkTo>
						<Link>C</Link>
					</ExtendedProperties>
				</Control>
				<Control Type="EditBox">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1422896450475</Id>
					<Name><![CDATA[editbox4]]></Name>
					<X>180</X><Y>520</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="100" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
						<ActionCode><![CDATA[this.n = Math.floor(Math.sqrt((5*(this.N - 1)+this.C)/6*this.C));
this.numRows=(int)this.n;]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<MinValue><![CDATA[1]]></MinValue>
						<LinkTo>true</LinkTo>
						<Link>N</Link>
					</ExtendedProperties>
				</Control>
			</Controls>

			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[numRows]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[numRows]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[numColumns]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[numColumns]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[numParticles]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[numParticles]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[infectionProbability]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[(float)(this.infectionProbability/100.0)]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[recoveryProbabilibty]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[(float)(this.recoveryProbability/100.0)]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[initialSusceptible]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[this.initialSusceptible]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[initialRecovered]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[this.initialRecovered]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[initialInfected]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[this.initialInfected]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[randomizeParticleLocationsBeforeEachStep]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[this.randomizeParticleLocationsBeforeEachStep]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[debugOutput]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[this.debugOutput]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[displayParticles]]></ParameterName>
				</Parameter>
			</Parameters>			
			<PresentationProperties 
				EnableAdaptiveFrameManagement="true" 
				EnableAntiAliasing="true"
				EnableEnhancedModelElementsAnimation="true"
				EnablePanning="true"
				ToolbarCustomizableAtRuntime="true"
				EnableZoom="true">
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<CpuRatio><![CDATA[ratio_1_2]]></CpuRatio>	        
				<Title><![CDATA[LGCA_c17 : LGCA_C17]]></Title>	
				<FramesPerSecond><![CDATA[20.0]]></FramesPerSecond>
				<RealTimeScale>1.0</RealTimeScale>
				<UIProperty Name="Experiment Progress" Value="false"/>
				<UIProperty Name="Simulation Progress" Value="true"/>
				<UIProperty Name="Statusbar Events Per Second" Value="false"/>
				<UIProperty Name="Statusbar Frames Per Second" Value="false"/>
				<UIProperty Name="Statusbar Memory" Value="true"/>
				<UIProperty Name="Statusbar Model Date" Value="true"/>
				<UIProperty Name="Statusbar Model Step" Value="false"/>
				<UIProperty Name="Statusbar Model Time" Value="true"/>
				<UIProperty Name="Statusbar Real Time Of Simulation" Value="false"/>
				<UIProperty Name="Statusbar Status" Value="true"/>
				<UIProperty Name="Toolbar Animation setup" Value="false"/>
				<UIProperty Name="Toolbar Execution control" Value="true"/>
				<UIProperty Name="Toolbar File" Value="false"/>
				<UIProperty Name="Toolbar Model navigation" Value="true"/>
				<UIProperty Name="Toolbar Time scale setup" Value="true"/>
				<UIProperty Name="Toolbar View" Value="false"/>
			</PresentationProperties>
			<ModelTimeProperties 
				UseCalendar="false">
				<StopOption><![CDATA[Never]]></StopOption>
				<InitialDate><![CDATA[1422662400000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1425081600000]]></FinalDate>	
				<FinalTime><![CDATA[100.0]]></FinalTime>	
			</ModelTimeProperties>
		</SimulationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1422736602831</Id>
			<Name><![CDATA[Tools]]></Name>
			<Description><![CDATA[A helper class]]></Description>
			<Text><![CDATA[import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.Stack;
import java.util.Timer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import com.anylogic.engine.connectivity.ResultSet;
import com.anylogic.engine.connectivity.Statement;
import com.anylogic.engine.elements.IElementDescriptor;
import com.anylogic.engine.markup.Network;
import com.anylogic.engine.Position;
import com.anylogic.engine.markup.PedFlowStatistics;
import com.anylogic.engine.markup.DensityMap;

import static java.lang.Math.*;
import static com.anylogic.engine.UtilitiesArray.*;
import static com.anylogic.engine.UtilitiesCollection.*;
import static com.anylogic.engine.presentation.UtilitiesColor.*;
import static com.anylogic.engine.presentation.UtilitiesDrawing.*;
import static com.anylogic.engine.HyperArray.*;

import com.anylogic.engine.*;
import com.anylogic.engine.analysis.*;
import com.anylogic.engine.connectivity.*;
import com.anylogic.engine.gis.*;
import com.anylogic.engine.markup.*;
import com.anylogic.engine.presentation.*;

import static com.anylogic.engine.Utilities.*;


import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.Stack;
import java.util.Timer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import com.anylogic.engine.connectivity.ResultSet;
import com.anylogic.engine.connectivity.Statement;
import com.anylogic.engine.elements.IElementDescriptor;
import com.anylogic.engine.markup.Network;
import com.anylogic.engine.Position;
import com.anylogic.engine.markup.PedFlowStatistics;
import com.anylogic.engine.markup.DensityMap;

import static java.lang.Math.*;
import static com.anylogic.engine.UtilitiesArray.*;
import static com.anylogic.engine.UtilitiesCollection.*;
import static com.anylogic.engine.presentation.UtilitiesColor.*;
import static com.anylogic.engine.presentation.UtilitiesDrawing.*;
import static com.anylogic.engine.HyperArray.*;

import com.anylogic.engine.*;
import com.anylogic.engine.analysis.*;
import com.anylogic.engine.connectivity.*;
import com.anylogic.engine.gis.*;
import com.anylogic.engine.markup.*;
import com.anylogic.engine.presentation.*;

import static com.anylogic.engine.Utilities.*;

/**
* Tools
*/	
public class Tools implements Serializable {
public static Random random = new Random(12345);

/**
* Default constructor
*/
public Tools() {
}
public static class GridHelper {
int[] rowBeginnings;
int[] rowEnds;
int numRows;
int numColumns;
int lastElementRowBeginnings;
//int lastElementRowEnds;
public GridHelper(int numRows, int numColumns) {
	// calculate rowbeginnings:
	rowBeginnings = new int[numRows];
	rowEnds = new int[numRows];
	this.numColumns=numColumns;
	this.numRows=numRows;
	int rowBeg = -numColumns;
	for (int i=0; i<numRows; i++) {
		rowBeg+=numColumns;
		this.rowBeginnings[i]=rowBeg;
	}
	int rowEnd=-1;
	for (int i=0; i<numRows; i++) {
		rowEnd+=numColumns;
		this.rowEnds[i]=rowEnd;
	}
	this.lastElementRowBeginnings = this.rowBeginnings.length-1;
	//this.lastElementRowEnds = this.rowEnds.length-1;
}
private boolean hasTopLeft(int index) {
	if (index<0) throw new RuntimeException("index "+index+" <0");
	boolean topLeft=true;
	for (int i=0; i<rowEnds.length; i++) {
		if (index<=rowEnds[i]) {
			return !topLeft;
		} else {
			topLeft=!topLeft;
		}
	}
	throw new RuntimeException("index "+index+" out of bounds");
}
private boolean isInTopRow(int index) {
	return index < this.numRows;
}
private boolean isInBottomRow(int index) {
	return index >= this.rowBeginnings[this.lastElementRowBeginnings];
}
private boolean isLeft(int index) {
	for (int i=0; i<this.rowBeginnings.length; i++) {
		if (index <= this.rowBeginnings[i]) {
			if (index==this.rowBeginnings[i]) {
				return true;
			}
		}
	}
	return false;
}
private boolean isRight(int index) {
	if (index < this.rowEnds[0]) return false;
	for (int i=0; i<this.rowEnds.length; i++) {
		if (index >= this.rowEnds[i]) {
			if (index==this.rowEnds[i]) {
				return true;
			}
		}
	}
	return false;
}
// to mitigate GC issues? maybe
private boolean top=false;
private boolean bottom=false;
private boolean left=false;
private boolean right=false;
private boolean topLeft=false;
private int out=-2;

public synchronized int getNeighbour(int currentIndex, Direction dir) {
	top=this.isInTopRow(currentIndex);
	bottom=this.isInBottomRow(currentIndex);
	//String debugStr=" ci:"+currentIndex+" direction:"+dir+" t:"+top+" b:"+bottom;
	
	// filter special cases
	if (top) {
		if (dir==Direction.NE) {//System.out.println("-1 NE top"+debugStr);
		return -1;}
		else if (dir==Direction.NW) {//System.out.println("-1 NW top"+debugStr);
		return -1;}
	} else if (bottom) {
		if (dir==Direction.SE) {//System.out.println("-1 SE top"+debugStr);
		return -1;}
		else if (dir==Direction.SW) {//System.out.println("-1 SW top"+debugStr);
		return -1;}
	}
	left=this.isLeft(currentIndex);
	right=this.isRight(currentIndex);
	topLeft=this.hasTopLeft(currentIndex);
	//debugStr = " ci:"+currentIndex+" direction:"+dir+" t:"+top+" r:"+right+" b:"+bottom+" l:"+left+" topLeft:"+topLeft;
	if (left) {
		if (dir==Direction.W) {//System.out.println("-1 W left"+debugStr);
		return -1;}
		if (!topLeft) {
			if (dir==Direction.NW) {//System.out.println("-1 NW left nTl"+debugStr);
			return -1;}
			else if (dir==Direction.SW) {//System.out.println("-1 SW left nTl"+debugStr);
			return -1;}
		}
	} else if (right) {
		if (dir==Direction.E) {//System.out.println("-1 NW right"+debugStr);
		return -1;}
		if (topLeft) {
			if (dir==Direction.NE) {//System.out.println("-1 NE right tl"+debugStr);
			return -1;}
			else if (dir==Direction.SE) {//System.out.println("-1 SE right tl"+debugStr);
			return -1;}
		}
	}

	out=-2;
	if (topLeft) {
		switch(dir) {
		case E : out= currentIndex+1;break;
		case NE: out= currentIndex-this.numColumns+1;break;
		case NW: out= currentIndex-this.numColumns;break;
		case W : out= currentIndex-1;break;
		case SW: out= currentIndex+numColumns;break;
		case SE: out= currentIndex+numColumns+1;break;
		}
	} else {
		switch(dir) {
		case E : out= currentIndex+1;break;
		case NE: out= currentIndex-this.numColumns;break;
		case NW: out= currentIndex-this.numColumns-1;break;
		case W : out= currentIndex-1;break;
		case SW: out= currentIndex+numColumns-1;break;
		case SE: out= currentIndex+numColumns;break;
		}
	}
	
	//System.out.println("getNB: out:"+out+" "+debugStr);
	if (out==-2) throw new RuntimeException("What happened, did not find neighbour: "
			+currentIndex+" "+dir+"; left:"+left+" right:"+right+" top:"+top+" bottom:"+bottom+" topLeft:"+topLeft);
	return out;
}
}
@Override
public String toString() {
return super.toString();
}

/**
* This number is here for model snapshot storing purpose<br>
* It needs to be changed when this class gets changed
*/ 
private static final long serialVersionUID = 1L;
/**
* NE=North East<br>
* SW=South West<br>
* etc...
* @author CLF
*
*/
public static enum Direction {
E(0),NE(1),NW(2),W(3),SW(4),SE(5);
private int value;
Direction(int value) {
	this.value = value;
}
int getValue() {
	return value;
}
public static Direction opposite(Direction dir) {
	switch(dir) {
	case E: return Direction.W;
	case NE: return Direction.SW;
	case NW: return Direction.SE;
	case W: return Direction.E;
	case SW: return Direction.NE;
	case SE: return Direction.NW;
	}
	return null;
}
public static Direction fromInt(int i) {
	if (i<0 || i>5) throw new RuntimeException("Invalid input integer. Must be between 0 and 5, but was "+i);
	switch(i) {
	case 0:
		return E;
	case 1:
		return NE;
	case 2:
		return NW;
	case 3:
		return W;
	case 4:
		return SW;
	case 5:
		return SE;
	}
	return null;
}
public static Direction random() {
	int x = Tools.random.nextInt(6);
	return Direction.fromInt(x);
}
}
public static class Point {
public double x=0;
public double y=0;
public Point() {
	
}
public Point(double x, double y) {
	this.x=x;
	this.y=y;
}
}

public static enum Status {
SUSCEPTIBLE,
INFECTED,
RECOVERED;
public static Color getColor(Status state) {
	if (state==null) return Color.ORANGE;
	switch(state) {
	case INFECTED: return Color.RED;
	case RECOVERED: return Color.GREEN;
	case SUSCEPTIBLE: return Color.BLACK;
	default: return Color.ORANGE;
	}
}
}
}


]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1423011337950</Id>
			<Name><![CDATA[Part]]></Name>
			<Text><![CDATA[import lgcac17.Tools.Status;
/**
 * Part
 */	
public class Part implements Serializable {
    /**
     * Default constructor
     */
    public Part() {
    }

	@Override
	public String toString() {
		return super.toString();
	}

	/**
	 * This number is here for model snapshot storing purpose<br>
	 * It needs to be changed when this class gets changed
	 */ 
	private static final long serialVersionUID = 1L;
	
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1423011775702</Id>
			<Name><![CDATA[Particle]]></Name>
			<Text><![CDATA[import lgcac17.Tools.Status;
/**
 * Particle
 */	
public class Particle implements Serializable {
	private int parentCellIndex = -1;
	private Tools.Direction direction = null;
	public void setDirection(Tools.Direction dir) {
		this.direction = dir;
	}
	public void setParentCell(int hCell) {
		this.parentCellIndex = hCell;
	}
	private ShapePixel pixel = new ShapePixel();
    /**
     * Default constructor
     */
    public Particle(int id, HexGrid hexGrid) {
    	this.pixel.setColor(Tools.Status.getColor(null));
    	if (hexGrid.displayParticles)hexGrid.presentation.add(this.pixel);
    	this.id=id;
    }
    private int id=-1;
	@Override
	public String toString() {
		return this.id+":"+super.toString();
	}

	/**
	 * This number is here for model snapshot storing purpose<br>
	 * It needs to be changed when this class gets changed
	 */ 
	private static final long serialVersionUID = 1L;
	//private Tools.Status initialState=null;
	private Tools.Status state=null;
	public Tools.Status getState() {
		return this.state;
	}
	public void setInitialState(Tools.Status state) {
		if (state==null) throw new NullPointerException("input state is null");
		//this.initialState=state;
		this.state = state;
	}
	public boolean tryToRecover(float recoveryProbability, boolean debugOutput) {
		synchronized(this){
			//System.out.println(this+ " recovertry");
			if (this.state != Tools.Status.INFECTED) {
				return false;
			}
			float ran = Tools.random.nextFloat();
			//System.out.println("r:"+ran +" "+this.hexGrid.recoveryProbabilibty);
			if (ran<=recoveryProbability) {
				//System.out.println(this+" tryToRecover success");
				this.state = Tools.Status.RECOVERED;
				if (debugOutput) {
					System.out.println(this.toString()+" recovers");
				}
				return true;
			} else {
				//System.out.println(this+" tryToRecover failure");
				return false;
			}
		}
	}
	
	public boolean willInfect(float infectionProbability) {
		if (this.state==Tools.Status.INFECTED) 
			return Tools.random.nextFloat()<=infectionProbability;
		else
			return false;
	}
	public void infect() {
		if (this.state==Tools.Status.SUSCEPTIBLE) {
			this.state=Tools.Status.INFECTED;
		}
	}
	
	public boolean isInfected() {
		return this.state == Tools.Status.INFECTED;
	}
	public boolean isSusceptible() {
		return this.state == Tools.Status.SUSCEPTIBLE;
	}
	public boolean isRecovered() {
		return this.state == Tools.Status.RECOVERED;
	}
	public void updateRepresentation(HexGrid hexGrid) {
		//System.out.println(this.id+" - "+this.state);
		this.pixel.setColor(Tools.Status.getColor(this.state));
		double[] pos = hexGrid.hCells.get(this.parentCellIndex).getPixelPosition(this.direction);
		this.pixel.setPos(pos[0], pos[1]);
	}
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1423055765759</Id>
			<Name><![CDATA[HCell]]></Name>
			<Text><![CDATA[import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.Stack;
import java.util.Timer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import com.anylogic.engine.connectivity.ResultSet;
import com.anylogic.engine.connectivity.Statement;
import com.anylogic.engine.elements.IElementDescriptor;
import com.anylogic.engine.markup.Network;
import com.anylogic.engine.Position;
import com.anylogic.engine.markup.PedFlowStatistics;
import com.anylogic.engine.markup.DensityMap;

import static java.lang.Math.*;
import static com.anylogic.engine.UtilitiesArray.*;
import static com.anylogic.engine.UtilitiesCollection.*;
import static com.anylogic.engine.presentation.UtilitiesColor.*;
import static com.anylogic.engine.presentation.UtilitiesDrawing.*;
import static com.anylogic.engine.HyperArray.*;

import com.anylogic.engine.*;
import com.anylogic.engine.analysis.*;
import com.anylogic.engine.connectivity.*;
import com.anylogic.engine.gis.*;
import com.anylogic.engine.markup.*;
import com.anylogic.engine.presentation.*;

import static com.anylogic.engine.Utilities.*;

import lgcac17.Tools.Direction;
import lgcac17.Tools.Status;
/**
* HCell
*/	
public class HCell implements Serializable{
public HCell(int index) {
	if (index < 0) throw new RuntimeException("Index < 0");
	this.index = index;
	this.onStartup();
}
private int index;
public int getIndex() {
	return this.index;
}
// Parameters
// Plain Variables
private double xLocation = 0.0;
private double yLocation = 0.0;

public void setXY(double x, double y) {
	this.xLocation = x; this.yLocation = y;
	for (Tools.Direction dir : Tools.Direction.values()) {
		switch(dir) {
		case E: pixelPosE  = new double[]{this.xLocation+this.pixelSize*3, this.yLocation+this.pixelSize*1};break;
		case NE:pixelPosNE = new double[]{this.xLocation+this.pixelSize*2, this.yLocation};break;
		case NW:pixelPosNW = new double[]{this.xLocation+this.pixelSize*1, this.yLocation};break;
		case W: pixelPosW  = new double[]{this.xLocation,                  this.yLocation+this.pixelSize*1};break;
		case SW:pixelPosSW = new double[]{this.xLocation+this.pixelSize*1, this.yLocation+this.pixelSize*2};break;
		case SE:pixelPosSE = new double[]{this.xLocation+this.pixelSize*2, this.yLocation+this.pixelSize*2};break;
		}
	}
}
private double[] pixelPosE = new double[]{4,4};
private double[] pixelPosNE = new double[]{4,4};
private double[] pixelPosNW = new double[]{4,4};
private double[] pixelPosW = new double[]{4,4};
private double[] pixelPosSW = new double[]{4,4};
private double[] pixelPosSE = new double[]{4,4};

public double getX() {
	return this.xLocation;
}
public double getY() {
	return this.yLocation;
}
public double[] getPixelPosition(Direction dir) {
	if (dir==null) return new double[]{3,3};
	switch(dir) {
	case E: return this.pixelPosE;
	case NE: return this.pixelPosNE;
	case NW: return this.pixelPosNW;
	case W: return this.pixelPosW;
	case SW: return this.pixelPosSW;
	case SE: return this.pixelPosSE;
	}
	return new double[]{3,3};
}

public static final double pixelSize = 2.0;
public static final double width = 4.0*pixelSize;
public static final double height = 3.0*pixelSize;
public static final double verticalOffset = 1.0*pixelSize;
public static final double horizontalOffset = 2.0*pixelSize;
private int[] inParticles = new int[]{-1,-1,-1,-1,-1,-1};
private int[] outParticles = new int[]{-1,-1,-1,-1,-1,-1};

private  int count;
// Collection Variables
//private java.util.ArrayList < Integer > inParticlesX = new java.util.ArrayList<Integer>();
//private java.util.ArrayList <Integer > outParticlesX = new java.util.ArrayList<Integer>();
//private java.util.ArrayList <Integer> neighbours = new java.util.ArrayList<Integer>();
private HCell getHCell(int index, HexGrid hexGrid) {
	if (index<0) throw new RuntimeException("index < 0 "+index);
	return hexGrid.hCells.get(index);
}
private void setInParticle(int index, int particle) {
	this.inParticles[index]=particle;
}
private void setInParticle(Direction dir, int particle) {
	this.setInParticle(dir.getValue(), particle);
}
private void setOutParticle(int index, int particle) {
	this.outParticles[index]=particle;
}
private void setOutParticle(Direction dir, int particle) {
	this.setOutParticle(dir.getValue(), particle);
}
private int getInParticle(int index) {
	return this.inParticles[index];
}
private int getInParticle(Direction dir) {
	return this.getInParticle(dir.getValue());
}
private int getOutParticle(int index) {
	return this.outParticles[index];
}
private int getOutParticle(Direction dir) {
	return this.getOutParticle(dir.getValue());
}
/**
 * Will check the neighbours and move particles that are supposed to come here to this cell.<br><br>
 * if particles hit a wall (no neighbour in the given direction) they will instead STAY in<br><br>
 * the cell but be moved in the opposite in-particle slow.<br><br>
 * So e.g.: out.E will go to in.W
 */
private void performMovement(HexGrid hexGrid) { 

	if (this.count==0) return;
	int p = -2;//temp
	for (int i=0; i<6; i++) {
		Tools.Direction dir = Tools.Direction.fromInt(i);
		Tools.Direction oppDir = Tools.Direction.opposite(dir);
		p = this.getOutParticle(dir);//this.outParticles.get(dir.getValue());
		if (p==-1) continue;
		HCell neighbour = this.getNeighbour(dir, hexGrid);
		this.setOutParticle(dir, -1);//this.outParticles.set(dir.getValue(), null);
		if (neighbour != null) {
			neighbour.recieveParticleFrom(this, p, hexGrid);
			this.count--;
		} else {
			// we've hit a wall
			this.setInParticle(oppDir, p);//this.inParticles.set(oppDir.getValue(), p);
		}
	} 
}
/**
 * rotates the out-particles in the HexCell clockwise.<br><br>
 * meaning: e.g. outParticles.E will be outParticles.NE
 */
private void rotateClockwise(  ) { 

	//System.out.println("rotateClockwise");
	int temp = this.getOutParticle(0);//this.outParticles.get(0);
	for (int i=0; i<5; i++) {
		//this.outParticles.set(i, this.outParticles.get(i+1));
		this.setOutParticle(i, this.getOutParticle(i+1));
	}
	this.setOutParticle(5, temp);//this.outParticles.set(5, temp); 
}

/**
 * rotates the out-particles in the HexCell counterclockwise.<br><br>
 * meaning: e.g. outParticles.E will be outParticles.SE
 */
private void rotateCounterClockwise(  ) { 

	//System.out.println("rotateCounterClockwise");
	int temp = this.getOutParticle(5);//this.outParticles.get(5);
	for (int i=5; i>0; i--) {
		//this.outParticles.set(i, this.outParticles.get(i-1));
		this.setOutParticle(i, this.getOutParticle(i-1));
	}
	this.setOutParticle(0, temp);//this.outParticles.set(0, temp); 
}

/**
 * Will autodetect the direction from which the particle is coming<br>
 * @param neighbour - must be neighbour, not null<br>
 * @param newParticle - null is valid
 */
public void recieveParticleFrom( HCell neighbour, int newParticle, HexGrid hexGrid) { 

	if (neighbour == null) throw new NullPointerException("Input neighbour is null");
	for (int i=0; i<6; i++) {
		if (neighbour.getIndex() == hexGrid.gridHelper.getNeighbour(this.index, Direction.fromInt(i))) {
			Tools.Direction dir = Tools.Direction.opposite(Tools.Direction.fromInt(i));
			this.setInParticle(dir, newParticle);//this.inParticles.set(dir.getValue(), newParticle);
			count++;
			return;
		}
	}
	throw new RuntimeException("Input neighbour "+neighbour.getIndex()+" is not a neighbour of this cell."+this.index); 
}

/**
 * Returns the neighbour that is in the input direction from this cell or null if there is none
 */
public HCell getNeighbour( Tools.Direction direction, HexGrid hexGrid ) { 

	if (direction==null) throw new NullPointerException("Input direction is null");
	int neig = hexGrid.gridHelper.getNeighbour(this.index, direction);
	if (neig<0) {
		return null;
	}
	return this.getHCell(neig, hexGrid); 
}

/**
 * The direction refers to the direction you need to go from "this" cell<br><br>
 * to reach the neighbour<br>
 * @param neighbour - may be null, may not exist for another direction<br>
 * @param direction - not null
 */
/*public void setNeighbour( int neighbourIndex, Tools.Direction direction ) { 
	if (direction==null) throw new NullPointerException("Input direction is null");
	if (neighbourIndex > 0 && this.neighbours.contains(neighbourIndex) && neighbourIndex!=(this.neighbours.get(direction.getValue()))) {
		throw new RuntimeException("The input neighbour is already set in this HexCell for a different direction.");
	}
	this.neighbours.set(direction.getValue(), neighbourIndex);
	//System.out.println("neighbourIndex: "+neighbourIndex+" direction"+direction);
	
}*/
/**
 * After movement<br>
 * Takes in-particles and performs collisions on them
 */
private void performCollision(boolean skipCollision) { 

	if (this.count==0) return;
	int count = this.count;//this.getInCount();
	if (count <0 || count > 6) throw new RuntimeException("Invalid count "+count);

	for (int i=0; i<6; i++) {
		this.setOutParticle(i, this.getInParticle(i));//this.outParticles.set(i, this.inParticles.get(i));
		this.setInParticle(i, -1);//this.inParticles.set(i, null);
	}
	if(skipCollision) return;
	if (count==0) return; // no collision
	else if (count==1) {
		//System.out.println("Count 1; no collision");
		return; // no collision
	} else if (count==2) { // possible collision(s)
		//System.out.println("inParticles:"+this.inParticles.toString());
		if (this.getOutParticle(Tools.Direction.E) != -1 && this.getOutParticle(Tools.Direction.W) != -1) {
		//if (outParticles.get(Tools.Direction.E.getValue()) != null && outParticles.get(Tools.Direction.W.getValue()) != null) {
			
			//collision 50% chance
			if (Tools.random.nextBoolean()) {
				//System.out.println("Count 2; E-W rotateClockwise");
				this.rotateClockwise();
			} else {
				//System.out.println("Count 2; E-W rotateCounterClockwise");
				this.rotateCounterClockwise();
			}
			return;
		} else if (this.getOutParticle(Tools.Direction.NE) != -1 && this.getOutParticle(Tools.Direction.SW) != -1) {
		//} else if (outParticles.get(Tools.Direction.NE.getValue()) !=null && outParticles.get(Tools.Direction.SW.getValue())!=null) {
			//collision 50% chance
			if (Tools.random.nextBoolean()) {
				//System.out.println("Count 2; NE-SW rotateClockwise");
				this.rotateClockwise();
			} else {
				//System.out.println("Count 2; NE-SW rotateCounterClockwise");
				this.rotateCounterClockwise();
			}
			return;
		} else if (this.getOutParticle(Tools.Direction.NW) != -1 && this.getOutParticle(Tools.Direction.SE) != -1) {
		//} else if (outParticles.get(Tools.Direction.NW.getValue()) !=null && outParticles.get(Tools.Direction.SE.getValue())!=null) {
			//collision 50% chance
			if (Tools.random.nextBoolean()) {
				//System.out.println("Count 2; NW-SE rotateClockwise");
				this.rotateClockwise();
			} else {
				//System.out.println("Count 2; NW-SE rotateCounterClockwise");
				this.rotateCounterClockwise();
			}
			return;
		} else {
			//System.out.println("Count 2; no collision");
			// no collision

		}
	} else if (count > 2) { // certain collision
		//System.out.println("Count 3; rotateClockwise");
		this.rotateClockwise();
	}
	//System.out.println(this.outParticles.toString()); 
}

void updateRepresentation(HexGrid hexGrid) { 

	//if (this.outParticles.get(Tools.Direction.E.getValue())!=null) {
	if (this.getOutParticle(Tools.Direction.E)!=-1) {
	//if (this.outParticles.get(Tools.Direction.E.getValue())!=null) {
		this.R_E = hexGrid.particles.get(this.getOutParticle(Tools.Direction.E)).getState();
	} else {
		this.R_E = null;
	}
	if (this.getOutParticle(Tools.Direction.NE)!=-1) {
	//if (this.outParticles.get(Tools.Direction.NE.getValue())!=null) {
		this.R_NE = hexGrid.particles.get(this.getOutParticle(Tools.Direction.NE)).getState();
	} else {
		this.R_NE = null;
	}
	if (this.getOutParticle(Tools.Direction.NW)!=-1) {
	//if (this.outParticles.get(Tools.Direction.NW.getValue())!=null) {
		this.R_NW = hexGrid.particles.get(this.getOutParticle(Tools.Direction.NW)).getState();
	} else {
		this.R_NW = null;
	}
	if (this.getOutParticle(Tools.Direction.W)!=-1) {
	//if (this.outParticles.get(Tools.Direction.W.getValue())!=null) {

		this.R_W = hexGrid.particles.get(this.getOutParticle(Tools.Direction.W)).getState();
	} else {
		this.R_W = null;
	}
	if (this.getOutParticle(Tools.Direction.SW)!=-1) {
	//if (this.outParticles.get(Tools.Direction.SW.getValue())!=null) {
		this.R_SW = hexGrid.particles.get(this.getOutParticle(Tools.Direction.SW)).getState();
	} else {
		this.R_SW = null;
	}
	if (this.getOutParticle(Tools.Direction.SE)!=-1) {
	//if (this.outParticles.get(Tools.Direction.SE.getValue())!=null) {
		this.R_SE = hexGrid.particles.get(this.getOutParticle(Tools.Direction.SE)).getState();
	} else {
		this.R_SE = null;
	}

}

void setParticle( Tools.Direction direction, Integer particle ) { 

	this.setOutParticle(direction, particle);//this.outParticles.set(direction.getValue(), particle);
	this.count++; 
}


Point 
getParticlePosition( Tools.Direction direction ) { 

	if (direction==null) throw new NullPointerException("Input direction is null");
	Point p = new Point();
	switch(direction) {
	case W:  p.x=29;p.y=15;return p;
	case SW: p.x=21;p.y=4; return p;
	case SE: p.x=8; p.y=4; return p;
	case E:  p.x=0; p.y=15;return p;
	case NE: p.x=8; p.y=25;return p;
	case NW: p.x=21;p.y=25;return p;
	}
	return null; 
}

void performInfections(HexGrid hexGrid) { 

	if (this.count==0) return;
	LinkedList<Integer> existing = new LinkedList<Integer>();
	for (int i=0; i<6;i++) {
		int p=this.getOutParticle(i);
		if (p!=-1) {
			existing.add(p);
		}
	}
	//System.out.println("performInfections() "+existing);
	for (int p1 : existing) {
		for (int p2 : existing) {
			if (p1 != p2) {
				if (hexGrid.particles.get(p1).isInfected()) {
					if (hexGrid.particles.get(p2).isSusceptible() && hexGrid.particles.get(p1).willInfect(hexGrid.infectionProbability)) {
						hexGrid.particles.get(p2).infect();
						hexGrid.numInfected++;
						hexGrid.numSusceptible--;
						if (hexGrid.debugOutput) {
							System.out.println(hexGrid.particles.get(p1).toString()+"["+this.toString()+"] infects "+hexGrid.particles.get(p2).toString()+"["+this.toString()+"]");
						}
					}
				}
			}

		}
	} 
}

/**
 * Sets all in- and outparticles null
 */
public void clearParticles(  ) { 

	for (int i=0; i<6; i++) {
		//this.inParticles.set(i, null);
		this.setInParticle(i, -1);
		//this.outParticles.set(i, null);
		this.setOutParticle(i, -1);
	}
	this.count = 0; 
}

void performRecoveries(HexGrid hexGrid) { 

	if (this.count==0) return;
	//System.out.println("performInfections() "+existing);
	int p1=-1;
	for (int i=0; i<6; i++) {//Integer p1 : existing) {
		p1=this.getOutParticle(i);
		if (p1==-1) continue;
		if (hexGrid.particles.get(p1).isInfected() && hexGrid.particles.get(p1).tryToRecover(hexGrid.recoveryProbabilibty, hexGrid.debugOutput)) {
			hexGrid.numInfected--;
			hexGrid.numRecovered++;
		}

	} 
}

public Tools.Status R_SW;
public Tools.Status R_NW;
public Tools.Status R_E;
public Tools.Status R_W;
public Tools.Status R_SE;
public Tools.Status R_NE;

public void onStep(HexGrid hexGrid) {

	this.performCollision(true);
	this.performInfections(hexGrid);
	this.performRecoveries(hexGrid);
	this.updateParticleParents(hexGrid);
	this.updateRepresentation(hexGrid); 
}

public void onBeforeStep(HexGrid hexGrid) {

	this.performMovement(hexGrid); 
}


public void onStartup() {
	this.clearParticles();

	this.R_E = null;
	this.R_SE = null;
	this.R_SW = null;
	this.R_W = null;
	this.R_NW = null;

	this.count=0; 
}
private void updateParticleParents(HexGrid hexGrid) {
	for (int i=0; i< 6; i++) {
		int pi = this.getOutParticle(i); //this.outParticles.get(i);
		if (pi==-1 || pi<0) continue;
		hexGrid.particles.get(pi).setParentCell(this.index);
		hexGrid.particles.get(pi).setDirection(Tools.Direction.fromInt(i));
		
	}
}
}


]]></Text>
		</JavaClass>
	</JavaClasses>
</Model>
</AnyLogicWorkspace>